# Useful when SmartListing target url is different than current one
$.rails.href = (element) ->
  element.attr('href') || element.data('<%= SmartListing.config.data_attributes(:href) %>')

class SmartListing
  constructor: (e) ->
    @container = e
    @name = @container.attr('id')
    @loading = @container.find(".<%= SmartListing.config.classes(:loading) %>")
    @content = @container.find(".<%= SmartListing.config.classes(:content) %>")
    @status = $(".<%= SmartListing.config.classes(:status) %>[data-<%= SmartListing.config.data_attributes(:main) %>='#{@name}']")
    @confirmed = null
    @popovers = {}

    @container.on 'ajax:before', (e) =>
      @fadeLoading()

    @container.on 'ajax:success', (e) =>
      if $(e.target).is('.<%= SmartListing.config.classes(:item_actions) %> <%= SmartListing.config.selectors(:item_action_destroy) %>')
        # handle HEAD OK response for deletion request
        editable = $(e.target).closest('.<%= SmartListing.config.classes(:editable) %>')
        if @container.find(".<%= SmartListing.config.classes(:editable) %>").length == 1
          @reload()
          return false
        else
          editable.remove()

          @container.trigger("smart_listing:destroy", editable)

        @changeItemCount(-1)
        @refresh()

        @fadeLoaded()
        return false

    @container.on 'click', '<%= SmartListing.config.selectors(:edit_cancel) %>', (event) =>
      editable = $(event.currentTarget).closest('.<%= SmartListing.config.classes(:editable) %>')
      if(editable.length > 0)
        # Cancel edit
        @cancelEdit(editable)
      else
        # Cancel new record
        @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
        @container.find('.<%= SmartListing.config.classes(:new_item_action) %>').removeClass('<%= SmartListing.config.classes(:hidden) %>')

      @setAutoshow(false)
      false

    @container.on 'click', '.<%= SmartListing.config.classes(:item_actions) %> a[data-<%= SmartListing.config.data_attributes(:confirmation) %>]', (event) =>
      $.fn.smart_listing.confirm $(event.currentTarget), $(event.currentTarget).data('<%= SmartListing.config.data_attributes(:confirmation) %>')

    @container.on 'click', '.<%= SmartListing.config.classes(:item_actions) %> a[data-<%= SmartListing.config.data_attributes(:popover) %>]', (event) =>
      name = $(event.currentTarget).data('<%= SmartListing.config.data_attributes(:popover) %>')
      if jQuery.isFunction(@popovers[name])
        @popovers[name]($(event.currentTarget))
        false


    @container.on 'click', 'input[type=text].<%= SmartListing.config.classes(:autoselect) %>', (event) ->
      $(this).select()

    @container.on 'change', '.<%= SmartListing.config.classes(:callback) %>', (event) =>
      checkbox = $(event.currentTarget)
      id = checkbox.closest("<%= SmartListing.config.selectors(:row) %>").data("<%= SmartListing.config.data_attributes(:id) %>")
      data = {}
      data[checkbox.val()] = checkbox.is(":checked")
      $.ajax({
        beforeSend: (xhr, settings) ->
          xhr.setRequestHeader "accept", "*/*;q=0.5, " + settings.accepts.script
        url: @container.data("<%= SmartListing.config.data_attributes(:callback_href) %>"),
        type: "POST",
        data: data,
      })

  fadeLoading: =>
    $.fn.smart_listing.onLoading(@content, @loading)

  fadeLoaded: =>
    $.fn.smart_listing.onLoaded(@content, @loading)
  
  itemCount: =>
    parseInt(@container.data('<%= SmartListing.config.data_attributes(:item_count) %>'))

  maxCount: =>
    parseInt(@container.data('<%= SmartListing.config.data_attributes(:max_count) %>'))

  setAutoshow: (v) =>

    @container.data('<%= SmartListing.config.data_attributes(:autoshow) %>', v)

  changeItemCount: (value) =>
    count = @container.data('<%= SmartListing.config.data_attributes(:item_count) %>') + value
    @container.data('<%= SmartListing.config.data_attributes(:item_count) %>', count)
    @container.find('<%= SmartListing.config.selectors(:pagination_count) %>').html(count)

  cancelEdit: (editable) =>
    if editable.data('<%= SmartListing.config.data_attributes(:inline_edit_backup) %>')
      editable.html(editable.data('<%= SmartListing.config.data_attributes(:inline_edit_backup) %>'))
      editable.removeClass('<%= SmartListing.config.classes(:inline_editing) %>')
      editable.removeData('<%= SmartListing.config.data_attributes(:inline_edit_backup) %>')
  
  # Callback called when record is added/deleted using ajax request
  refresh: () =>
    header = @content.find('<%= SmartListing.config.selectors(:head) %>')
    footer = @content.find('.<%= SmartListing.config.classes(:pagination_per_page) %>')
    no_records = @content.find('.<%= SmartListing.config.classes(:no_records) %>')

    if @itemCount() == 0
      header.hide()
      footer.hide()
      no_records.show()
    else
      header.show()
      footer.show()
      no_records.hide()

    if @maxCount()
      if @itemCount() >= @maxCount()
        @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
        @container.find('.<%= SmartListing.config.classes(:new_item_action) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
      else
        if @container.data('<%= SmartListing.config.data_attributes(:autoshow) %>')
          @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').removeClass('<%= SmartListing.config.classes(:hidden) %>')
          @container.find('.<%= SmartListing.config.classes(:new_item_action) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
        else
          @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
          @container.find('.<%= SmartListing.config.classes(:new_item_action) %>').removeClass('<%= SmartListing.config.classes(:hidden) %>')

    @status.each (index, status) =>
      $(status).find('.<%= SmartListing.config.classes(:limit) %>').html(@maxCount() - @itemCount())
      if @maxCount() - @itemCount() == 0
        $(status).find('.<%= SmartListing.config.classes(:limit_alert) %>').show()
      else
        $(status).find('.<%= SmartListing.config.classes(:limit_alert) %>').hide()
  
  # Trigger AJAX request to reload the list
  reload: () =>
    $.rails.handleRemote(@container)
  
  params: (value) =>
    if value
      @container.data('<%= SmartListing.config.data_attributes(:params) %>', value)
    else
      @container.data('<%= SmartListing.config.data_attributes(:params) %>')

  registerPopover: (name, callback) =>
    @popovers[name] = callback

  #################################################################################################
  # Methods executed by rails UJS:

  new_item: (content) =>
    if !@maxCount() || (@itemCount() < @maxCount())
      new_item_action = @container.find('.<%= SmartListing.config.classes(:new_item_action) %>')
      new_item_placeholder = @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')

      @container.find('.<%= SmartListing.config.classes(:editable) %>').each (i, v) =>
        @cancelEdit($(v))

      new_item_action.addClass('<%= SmartListing.config.classes(:hidden) %>')
      new_item_placeholder.removeClass('<%= SmartListing.config.classes(:hidden) %>')
      new_item_placeholder.html(content)
      new_item_placeholder.addClass('<%= SmartListing.config.classes(:inline_editing) %>')

      @fadeLoaded()

  create: (id, success, content) =>
    new_item_action = @container.find('.<%= SmartListing.config.classes(:new_item_action) %>')
    new_item_placeholder = @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>')

    if success
      new_item_placeholder.addClass('<%= SmartListing.config.classes(:hidden) %>')
      new_item_action.removeClass('<%= SmartListing.config.classes(:hidden) %>')

      new_item = $('<tr />').addClass('<%= SmartListing.config.classes(:editable) %>')
      new_item.attr('data-<%= SmartListing.config.data_attributes(:id) %>', id)
      new_item.html(content)
      new_item_placeholder.before(new_item)

      @container.trigger("smart_listing:create:success", new_item)

      @changeItemCount(1)
      @refresh()
    else
      new_item_placeholder.html(content)

      @container.trigger("smart_listing:create:fail", new_item_placeholder)

    @fadeLoaded()

  edit: (id, content) =>
    @container.find('.<%= SmartListing.config.classes(:editable) %>').each (i, v) =>
      @cancelEdit($(v))
    @container.find('.<%= SmartListing.config.classes(:new_item_placeholder) %>').addClass('<%= SmartListing.config.classes(:hidden) %>')
    @container.find('.<%= SmartListing.config.classes(:new_item_action) %>').removeClass('<%= SmartListing.config.classes(:hidden) %>')

    editable = @container.find(".<%= SmartListing.config.classes(:editable) %>[data-<%= SmartListing.config.data_attributes(:id) %>=#{id}]")
    editable.data('<%= SmartListing.config.data_attributes(:inline_edit_backup) %>', editable.html())
    editable.html(content)
    editable.addClass('<%= SmartListing.config.classes(:inline_editing) %>')

    @container.trigger("smart_listing:edit", editable)

    @fadeLoaded()

  update: (id, success, content) =>
    editable = @container.find(".<%= SmartListing.config.classes(:editable) %>[data-<%= SmartListing.config.data_attributes(:id) %>=#{id}]")
    if success
      editable.removeClass('<%= SmartListing.config.classes(:inline_editing) %>')
      editable.removeData('<%= SmartListing.config.data_attributes(:inline_edit_backup) %>')
      editable.html(content)

      @container.trigger("smart_listing:update:success", editable)

      @refresh()
    else
      editable.html(content)

      @container.trigger("smart_listing:update:fail", editable)

    @fadeLoaded()
  
  destroy: (id, destroyed) =>
    # No need to do anything here, already handled by ajax:success handler

  remove: (id) =>
    editable = @container.find(".<%= SmartListing.config.classes(:editable) %>[data-<%= SmartListing.config.data_attributes(:id) %>=#{id}]").first()
    editable.remove()

    @container.trigger("smart_listing:remove", editable)
  
  update_list: (content, data) =>
    @container.data("<%= SmartListing.config.data_attributes(:params) %>", $.extend(@container.data("<%= SmartListing.config.data_attributes(:params) %>"), data["<%= SmartListing.config.data_attributes(:params) %>"]))
    @container.data("<%= SmartListing.config.data_attributes(:max_count) %>", data["<%= SmartListing.config.data_attributes(:max_count) %>"])
    @container.data("<%= SmartListing.config.data_attributes(:item_count) %>", data["<%= SmartListing.config.data_attributes(:item_count) %>"])

    @content.html(content)

    @refresh()
    @fadeLoaded()

$.fn.smart_listing = () ->
  map = $(this).map () ->
    if !$(this).data('<%= SmartListing.config.data_attributes(:main) %>')
      $(this).data('<%= SmartListing.config.data_attributes(:main) %>', new SmartListing($(this)))
    $(this).data('<%= SmartListing.config.data_attributes(:main) %>')
  if map.length == 1
    map[0]
  else
    map

$.fn.smart_listing.observeField = (field, opts = {}) ->
   key_timeout = null
   last_value = null
   options =
     onFilled: () ->
     onEmpty: () ->
     onChange: () ->
   options = $.extend(options, opts)
 
   keyChange = () ->
     if field.val().length > 0
       options.onFilled()
     else
       options.onEmpty()

     if field.val() == last_value && field.val().length != 0
       return
     lastValue = field.val()
 
     options.onChange()
 
   field.data('<%= SmartListing.config.data_attributes(:observed) %>', true)
 
   field.bind 'keydown', (e) ->
     if(key_timeout)
       clearTimeout(key_timeout)
 
     key_timeout = setTimeout(->
       keyChange()
     , 400)

$.fn.smart_listing.showPopover = (elem, body) ->
  elem.popover('destroy')
  elem.popover(content: body, html: true, trigger: 'manual', title: null)
  elem.popover('show')

$.fn.smart_listing.showConfirmation = (confirmation_elem, msg, confirm_callback) ->
  buildPopover = (confirmation_elem, msg) ->
    deletion_popover = $('<div/>').addClass('confirmation_box')
    deletion_popover.append($('<p/>').html(msg))
    deletion_popover.append($('<p/>')
      .append($('<button/>').html('Yes').addClass('btn btn-danger ').click (event) =>
        # set @confirmed element and emulate click on icon
        editable = $(event.currentTarget).closest('.<%= SmartListing.config.classes(:editable) %>')
        confirm_callback(confirmation_elem)
        $(confirmation_elem).click()
        $(confirmation_elem).popover('destroy')
      )
      .append(" ")
      .append($('<button/>').html('No').addClass('btn btn-small').click (event) =>
        editable = $(event.currentTarget).closest('.<%= SmartListing.config.classes(:editable) %>')
        $(confirmation_elem).popover('destroy')
      )
    )

  $.fn.smart_listing.showPopover confirmation_elem, buildPopover(confirmation_elem, msg)

$.fn.smart_listing.confirm = (elem, msg) ->
  if !elem.data("confirmed")
    # We need confirmation
    $.fn.smart_listing.showConfirmation elem, msg, (confirm_elem) =>
      confirm_elem.data("confirmed", true)
    false
  else
    # Confirmed, reset flag and go ahead with deletion
    elem.data("confirmed", false)
    true

$.fn.smart_listing.onLoading = (content, loader) ->
  content.stop(true).fadeTo(500, 0.2)
  loader.show()
  loader.stop(true).fadeTo(500, 1)

$.fn.smart_listing.onLoaded = (content, loader) ->
  content.stop(true).fadeTo(500, 1)
  loader.stop(true).fadeTo 500, 0, () =>
    loader.hide()

$.fn.smart_listing_controls = () ->
  reload = (controls) ->
    container = $("##{controls.data('<%= SmartListing.config.data_attributes(:main) %>')}")
    smart_listing = container.smart_listing()

    # serialize form and merge it with smart listing params
    prms = {}
    $.each controls.serializeArray(), (i, field) ->
      prms[field.name] = field.value
    prms = $.extend(smart_listing.params(), prms)
    smart_listing.params(prms)

    container.trigger('ajax:before')
    smart_listing.reload()

  $(this).each () ->
    controls = $(this)
    smart_listing = $("##{controls.data('<%= SmartListing.config.data_attributes(:main) %>')}")
    reset = controls.find(".<%= SmartListing.config.classes(:controls_reset) %>")

    controls.submit ->
      # setup smart listing params, reload and don't actually submit controls form
      reload(controls)
      false

    controls.find('input, select').change () ->
      unless $(this).data('<%= SmartListing.config.data_attributes(:observed) %>') # do not submit controls form when changed field is observed (observing submits form by itself)
        reload(controls)

    $.fn.smart_listing_controls.filter(controls.find('.<%= SmartListing.config.classes(:filtering) %>'))

$.fn.smart_listing_controls.filter = (filter) ->
  form = filter.closest('form')
  button = form.find('<%= SmartListing.config.selectors(:filtering_button) %>')
  icon = form.find('<%= SmartListing.config.selectors(:filtering_icon) %>')
  field = form.find('<%= SmartListing.config.selectors(:filtering_input) %>')

  $.fn.smart_listing.observeField(field,
    onFilled: ->
      icon.removeClass('<%= SmartListing.config.classes(:filtering_search) %>')
      icon.addClass('<%= SmartListing.config.classes(:filtering_cancel) %>')
      button.removeClass('<%= SmartListing.config.classes(:filtering_disabled) %>')
    onEmpty: ->
      icon.addClass('<%= SmartListing.config.classes(:filtering_search) %>')
      icon.removeClass('<%= SmartListing.config.classes(:filtering_cancel) %>')
      button.addClass('<%= SmartListing.config.classes(:filtering_disabled) %>')
    onChange: ->
      form.submit()
  )

  button.click ->
    if field.val().length > 0
      field.val('')
      field.trigger('keydown')
    return false

ready ->
  $('.<%= SmartListing.config.classes(:main) %>').smart_listing()
  $('.<%= SmartListing.config.classes(:controls) %>').smart_listing_controls()

$(document).ready ready
$(document).on "page:load", ready
