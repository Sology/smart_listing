{"version":3,"file":"smart_listing.js","sources":["../app/javascript/smart_listing/registry.js","../app/javascript/smart_listing/actions.js","../app/javascript/smart_listing/controllers/base.js","../app/javascript/smart_listing/events.js","../app/javascript/smart_listing/index.js","../app/javascript/smart_listing/controllers/tailwind.js"],"sourcesContent":["class SmartListingRegistry {\n  static registryList = {};\n\n  static register(name, controllerInstance) {\n    this.registryList[name] = controllerInstance;\n  }\n\n  static get(name) {\n    return this.registryList[name];\n  }\n}\n\nexport default SmartListingRegistry;\n","export const actionNames = {\n  REPLACE: 'replace',\n};\n\nexport const actionsList = {\n  reloadList: (target, template) => {\n    if (target && template) {\n      return (target.innerHTML = template.innerHTML);\n    }\n    throw new Error(`Target: ${target}, template: ${template}`);\n  },\n};\n","import { Controller } from 'stimulus';\nimport Registry from '../registry';\nimport { dispatchBeforeSendEvent, dispatchAfterCompleteEvent } from '../events';\nimport { actionNames, actionsList } from '../actions';\n\nconst STATUS_OK = 'OK';\n\nexport default class extends Controller {\n  static values = { name: String };\n\n  connect() {\n    // debugger;\n    Registry.register(this.nameValue, this);\n  }\n\n  beforeSend(e) {\n    console.log('before');\n    e.detail[0].setRequestHeader('Accept', 'text/vnd.smart-listing-remote.html');\n\n    dispatchBeforeSendEvent(this.element);\n\n    return true;\n  }\n\n  performAction(action, target, template) {\n    switch (action) {\n      case actionNames.REPLACE:\n        return actionsList.reloadList(target, template);\n      default:\n        throw new Error(`Unknown action: ${action}`);\n    }\n  }\n\n  update(e) {\n    console.log('update');\n    const [xhr, status] = e.detail;\n\n    if (status === STATUS_OK) {\n      const parser = new DOMParser();\n      const tempDoc = parser.parseFromString(xhr.response, 'text/html');\n\n      const smartListingActionNodes = tempDoc.querySelectorAll('smart-listing-action');\n\n      smartListingActionNodes.forEach((element) => {\n        const actionName = element.getAttribute('name');\n        const targetId = element.getAttribute('target');\n        const target = document.getElementById(`${targetId}`);\n        const template = element.querySelector('template');\n\n        this.performAction(actionName, target, template);\n      });\n    } else {\n      console.error(`Status ${xhr.status}`);\n    }\n\n    dispatchAfterCompleteEvent(this.element);\n  }\n}\n","export const eventsName = {\n  BEFORE_SEND: 'beforesend',\n  AFTER_COMPLETE: 'aftercomplete',\n};\n\nexport const dispatchBeforeSendEvent = (htmlElement) => {\n  const beforeSendEvent = new Event(eventsName.BEFORE_SEND);\n  htmlElement.dispatchEvent(beforeSendEvent);\n};\n\nexport const dispatchAfterCompleteEvent = (htmlElement) => {\n  const afterCompleteEvent = new Event(eventsName.AFTER_COMPLETE);\n  htmlElement.dispatchEvent(afterCompleteEvent);\n};\n","import BaseController from './controllers/base';\nimport TailwindController from './controllers/tailwind';\nimport Registry from './registry';\nimport { actionsList } from './actions';\n\nconst SmartListing = {\n  controllers: {\n    base: BaseController,\n    tailwind: TailwindController,\n  },\n  registry: Registry,\n  actions: actionsList,\n};\n\nwindow.SmartListing = SmartListing;\n\nexport default SmartListing;\n","import BaseController from './base';\nimport { eventsName } from '../events';\n\nexport default class TailwindSmartListingController extends BaseController {\n  connect() {\n    super.connect();\n\n    console.log('hello from tailwind controller');\n\n    this.element.addEventListener(eventsName.BEFORE_SEND, (e) => {\n      e.target.classList.add('opacity-20', 'pointer-events-none', 'transition-opacity');\n    });\n    this.element.addEventListener(eventsName.AFTER_COMPLETE, (e) => {\n      e.target.classList.remove('opacity-20', 'pointer-events-none');\n    });\n  }\n}\n"],"names":["SmartListingRegistry","register","name","controllerInstance","this","registryList","get","actionsList","reloadList","target","template","innerHTML","Error","connect","Registry","nameValue","beforeSend","e","htmlElement","beforeSendEvent","console","log","detail","setRequestHeader","element","Event","dispatchEvent","performAction","action","update","afterCompleteEvent","xhr","DOMParser","parseFromString","response","querySelectorAll","forEach","actionName","getAttribute","targetId","document","getElementById","querySelector","_this","error","status","Controller","values","String","SmartListing","controllers","base","BaseController","tailwind","_BaseController","addEventListener","classList","add","remove","registry","actions","window"],"mappings":"kNAAMA,oCAGGC,SAAP,SAAgBC,EAAMC,GACpBC,KAAKC,aAAaH,GAAQC,KAGrBG,IAAP,SAAWJ,GACT,YAAYG,aAAaH,SARvBF,EACGK,aAAe,OCGXE,EAAc,CACzBC,WAAY,SAACC,EAAQC,GACnB,GAAID,GAAUC,EACZ,OAAQD,EAAOE,UAAYD,EAASC,UAEtC,UAAUC,iBAAiBH,iBAAqBC,uGCClDG,QAAA,WAEEC,EAASb,SAASG,KAAKW,UAAWX,SAGpCY,WAAA,SAAWC,GCV0B,IAACC,EAChCC,EDeJ,OALAC,QAAQC,IAAI,UACZJ,EAAEK,OAAO,GAAGC,iBAAiB,SAAU,sCCZHL,EDcZd,KAAKoB,QCbzBL,EAAkB,IAAIM,MALf,cAMbP,EAAYQ,cAAcP,SDiB1BQ,cAAA,SAAcC,EAAQnB,EAAQC,GAC5B,OAAQkB,GACN,IDzBK,UC0BH,OAAOrB,EAAYC,WAAWC,EAAQC,GACxC,QACE,UAAUE,yBAAyBgB,OAIzCC,OAAA,SAAOZ,cACLG,QAAQC,IAAI,UADJ,ICvB+BH,EACnCY,IDwBkBb,EAAEK,OAAjBS,OA9BO,aAiCG,IAAIC,WACIC,gBAAgBF,EAAIG,SAAU,aAEbC,iBAAiB,wBAEjCC,QAAQ,SAACZ,GAC/B,IAAMa,EAAab,EAAQc,aAAa,QAClCC,EAAWf,EAAQc,aAAa,UAChC7B,EAAS+B,SAASC,kBAAkBF,GACpC7B,EAAWc,EAAQkB,cAAc,YAEvCC,EAAKhB,cAAcU,EAAY5B,EAAQC,KAGzCU,QAAQwB,gBAAgBb,EAAIc,QC1CS3B,ED6CZd,KAAKoB,QC5C5BM,EAAqB,IAAIL,MATf,iBAUhBP,EAAYQ,cAAcI,ODLCgB,gBACpBC,OAAS,CAAE7C,KAAM8C,YEHpBC,EAAe,CACnBC,YAAa,CACXC,KAAMC,EACNC,iGCJFxC,QAAA,WACEyC,YAAMzC,mBAENO,QAAQC,IAAI,kCAEZjB,KAAKoB,QAAQ+B,iBFRF,aEQ2C,SAACtC,GACrDA,EAAER,OAAO+C,UAAUC,IAAI,aAAc,sBAAuB,wBAE9DrD,KAAKoB,QAAQ+B,iBFVC,gBEU2C,SAACtC,GACxDA,EAAER,OAAO+C,UAAUE,OAAO,aAAc,6BAVcN,IDO1DO,SAAU7C,EACV8C,QAASrD,GAGXsD,OAAOZ,aAAeA"}